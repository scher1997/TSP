---
title: GurobiPy Exploration
output: html_document
bibliography: references.bib
---


# GurobiPy File

This quarto document is meant to be where we explore the Traveling Salesperson Problem and attempt to find an optimal, or close to optimal solution through an exact approach (GUROBI). I'm using GurobiPy which forces me to use Gurobi. I used GurobiPy in my research when I had access to a commerical license. Therefore this file might become dated as my license expires, but I did some of this work "for fun" towards the end of my PhD. 

I don't plan to uncover any crazy insights here, but I haven't done much with the TSP and it's one of the most popular optimization problems to ever have exist. I also want to examine the Vehicle Routing Problem which is a generalization of the TSP. 

### Install Dependencies  
```{python}
import matplotlib.pyplot as plt
import numpy as np
import gurobipy as gp
from gurobipy import GRB
import json
import math
from itertools import combinations
import folium 
```

### Define Problem
First let's examine a few different formulations of the TSP. I'll try to use material from @applegate2011traveling. The famous authors in Operations Research helped to develop the CONCORDE TSP Solver. The **BI** in Bixby is the **BI** in Gurobi. Fun fact, Gurobi is based on Drs Zonghao **Gu**, Edward **Ro**thberg, and Robert **Bi**xby. The three were formerly employees, with Bixby a co-founder, at CPLEX, and in 2008 they created the competitor (now) Gurobi [https://www.informs.org/Impact/O.R.-Analytics-Success-Stories/Industry-Profiles/Gurobi-Optimization]. I love that they have such an amazing solver and the company, as of this writing, provides multiple lectures online not just to highlight their solver but to teach optimization in a broader sense. Some members of their team at Gurobi are heavyweights in the optimization field.

Back to the TSP... The goal of the TSP is to find the shortest possible route that visits each city once and returns to the original city. The idea of a travelings salesman visiting each node/city/house and trying to sell something, then make it home when the route is complete. If you're walking/biking/driving/flying you'd want to execute this task with the fastest route possible. 

The TSP may either be a symmetric TSP or asymmetric TSP, where the former assumes the distance from city $i$ to city $j$ is the same as the distance from city $j$ to city $i$ while the latter does not. However it is common to reduce an asymmetric TSP to a symmetric TSP by splitting each city $v$ into a pair of cities $v_{in}$ and $v_{out}$. $v_{in}$ is the end of the path heading into city $v$ and $v_{out}$ is the path heading out of city $v$. The pair of cities $v_{in}$ and $v_{out}$ are joined by a zero cost path with an additional city in the middle $v_{mid}$. The focus of this work, as well as most TSP work, will be on the symmetric TSP.

## TSP Model Formulation
We will use the formulation from one of the original papers [@dantzig1954solution] on the TSP published out of RAND from some of the forefathers of Operations Research. They focused on the 50 United States capital cities as their nodes in the TSP. This formulation is known as the Dantzig-Fulkerson-Johnson (DFJ) formulation, compared to other notable formulations such as the Miller-Tucker-Zemlin (MTZ) formulation. See @bektacs2014requiem for a thorough review of the formulations and the importance of their subtour elimination constraints.  
### Sets and Indices
$i, j \in Capitals $: indices and set of US capital cities.

$\text{Pairings}= \{(i,j) \in Capitals \times Capitals \}$: Set of allowed pairings

$S \subset Capitals$: A subset of the set of US capital cities.

$G = (Capitals, Pairings)$: A graph where the set $Capitals$ defines the set of nodes and the set $Pairings$ defines the set of edges. 

### Parameters 

$d_{i, j} \in \mathbb{R}^+$: Distance from capital city $i$ to capital city $j$, for all $(i, j) \in Pairings$. 

Notice that the distance from capital city $i$ to capital city $j$ is the same as the distance from capital city $j$ to capital city $i$, i.e. $d_{i, j} = d_{j, i}$. For this reason, this TSP is also called the symmetric Traveling Salesman Problem.

### Decision Variables
$x_{i, j} \in \{0, 1\}$: This variable is equal to 1, if we decide to connect city $i$ with city $j$. Otherwise, the decision variable is equal to zero.

### Objective Function
- **Shortest Route**. Minimize the total distance of a route. A route is a sequence of capital cities where the salesperson visits each city only once and returns to the starting capital city.

\begin{equation}
\text{Min} \quad Z = \sum_{(i,j) \in \text{Pairings}}d_{i,j} \cdot x_{i,j}
\tag{0}
\end{equation}

### Constraints 
- **Symmetry Constraints**. For each edge $(i,j)$, ensure that the city capitals $i$ and $j$ are connected, if the former is visited immediately before or after visiting the latter.

\begin{equation}
x_{i, j} = x_{j, i} \quad \forall (i, j) \in Pairings
\tag{1}
\end{equation}

- **Entering and leaving a capital city**. For each capital city $i$, ensure that this city is connected to two other cities. 

\begin{equation}
\sum_{(i,j) \in \text{Pairings}}x_{i,j} = 2 \quad \forall  i \in Capitals
\tag{2}
\end{equation}

- **Subtour elimination**. These constraints ensure that for any subset of cities $S$ of the set of $Capitals$, there is no cycle. That is, there is no route that visits all the cities in the subset and returns to the origin city.

\begin{equation}
\sum_{(i \neq j) \in S}x_{i,j} \leq |S|-1 \quad \forall  S \subset  Capitals
\tag{3}
\end{equation}

- **Remark**. In general, if the number of cities of the TSP is $n$, then the possible number of routes is n\!.
Since there are an exponential number of constraints ($2^{n} - 2$) to eliminate cycles, we use lazy constraints to dynamically eliminate those cycles. 

## Code Model in Python with GurobiPy

### Get parameters from data

```{python}
# Read capital names and coordinates from json file
try:
  capitals_json = json.load(open('capitals.json'))
except:
  import urllib.request
  url = 'https://raw.githubusercontent.com/Gurobi/modeling-examples/master/traveling_salesman/capitals.json'
  data = urllib.request.urlopen(url).read()
  capitals_json = json.loads(data)

capitals = []
coordinates = {}
for state in capitals_json:
    if state not in ['AK', 'HI']:
      capital = capitals_json[state]['capital']
      capitals.append(capital)
      coordinates[capital] = (float(capitals_json[state]['lat']), float(capitals_json[state]['long']))
```

### Calculate distances from each pair of state capitals

```{python}
# Compute pairwise distance matrix

def distance(city1, city2):
    c1 = coordinates[city1]
    c2 = coordinates[city2]
    diff = (c1[0]-c2[0], c1[1]-c2[1])
    return math.sqrt(diff[0]*diff[0]+diff[1]*diff[1])

dist = {(c1, c2): distance(c1, c2) for c1, c2 in combinations(capitals, 2)}
```

### Model
```{python}
m = gp.Model()

# Variables: is city 'i' adjacent to city 'j' on the tour?
vars = m.addVars(dist.keys(), obj=dist, vtype=GRB.BINARY, name='x')

# Symmetric direction: Copy the object
for i, j in vars.keys():
    vars[j, i] = vars[i, j]  # edge in opposite direction

# Constraints: two edges incident to each city
cons = m.addConstrs(vars.sum(c, '*') == 2 for c in capitals)

# STATUS CODES
# https://www.gurobi.com/documentation/9.5/refman/optimization_status_codes.html

```

### Callbacks
Subtour eliminations are the tricky part of the TSP. They prevent multiple loops in a TSP tour. The goal is to visit each city once for the tour, which creates a hamiltonion cycle. There's an exponential number of these constraints so a clever trick is to use model callbacks to add constraints as we need them. Model callbacks are basically something we reference when the model encounters (*where* argument) a particular scenario. 
```{python}
# Callback - use lazy constraints to eliminate sub-tours

def subtourelim(model, where):
    if where == GRB.Callback.MIPSOL:
        # make a list of edges selected in the solution
        vals = model.cbGetSolution(model._vars)
        selected = gp.tuplelist((i, j) for i, j in model._vars.keys()
                             if vals[i, j] > 0.5)
        # find the shortest cycle in the selected edge list
        tour = subtour(selected)
        if len(tour) < len(capitals):
            # add subtour elimination constr. for every pair of cities in subtour
            model.cbLazy(gp.quicksum(model._vars[i, j] for i, j in combinations(tour, 2))
                         <= len(tour)-1)

# Given a tuplelist of edges, find the shortest subtour

def subtour(edges):
    unvisited = capitals[:]
    cycle = capitals[:] # Dummy - guaranteed to be replaced
    while unvisited:  # true if list is non-empty
        thiscycle = []
        neighbors = unvisited
        while neighbors:
            current = neighbors[0]
            thiscycle.append(current)
            unvisited.remove(current)
            neighbors = [j for i, j in edges.select(current, '*')
                         if j in unvisited]
        if len(thiscycle) <= len(cycle):
            cycle = thiscycle # New shortest subtour
    return cycle

```

### Solve Model

```{python}
m._vars = vars
m.Params.lazyConstraints = 1
m.optimize(subtourelim)
```

### Get solution

```{python}
# Retrieve solution

vals = m.getAttr('x', vars)
selected = gp.tuplelist((i, j) for i, j in vals.keys() if vals[i, j] > 0.5)

tour = subtour(selected)
assert len(tour) == len(capitals)
```

### Display

```{python}
map = folium.Map(location=[40,-95], zoom_start = 4)

points = []
for city in tour:
  points.append(coordinates[city])
points.append(points[0])

folium.PolyLine(points).add_to(map)

map
```